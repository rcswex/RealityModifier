# QBIN Format Detailed Analysis - Bell Pair
# Each byte explained for learning purposes

## Header Section (32 bytes)

### Magic Number (4 bytes)
0x51424947 = "QBIN" in ASCII
- 0x51 = 'Q'
- 0x42 = 'B' 
- 0x49 = 'I'
- 0x4E = 'N'

### Version (4 bytes)
0x00000002 = Version 2.0
- Major version: 2
- Minor version: 0

### Stability Level (4 bytes)
0x0001A753 = High stability guarantee
- Damping enabled: Yes
- Phase correction: Yes
- Convergence guaranteed: Yes

### Compression Method (4 bytes)
0x00003243 = Complex number compression
- 4D→2D mapping enabled
- Hypersphere projection active

### Offsets (16 bytes)
- Instruction offset: 0x00000040 (64 bytes from start)
- Data offset: 0x00000080 (128 bytes from start)
- Entanglement offset: 0x000000C0 (192 bytes from start)
- Reserved: 0x00000000

## Instruction Encoding

### LOAD instruction (0x01)
Bytes: 01 C0 00 00 3F 80 00 00
- 0x01 = LOAD opcode
- 0xC0 = Register 0, full precision
- 0x0000 = Index 0
- 0x3F800000 = IEEE 754 float 1.0 (real part)
- Following 4 bytes would be imaginary part (0.0)

### HADAMARD instruction (0x20)
Bytes: 20 C0 00 00 3F 35 04 F3
- 0x20 = HADAMARD opcode
- 0xC0 = Register 0
- 0x0000 = Reserved
- 0x3F3504F3 = IEEE 754 float 0.7071 (1/√2)

### CNOT instruction (0x25)
Bytes: 25 C0 C1 00 3A 83 12 6F
- 0x25 = CNOT opcode
- 0xC0 = Control register (r0)
- 0xC1 = Target register (r1)
- 0x00 = Flags
- 0x3A83126F = Correlation damping factor (0.001)

### STABILIZE instruction (0x43)
Bytes: 43 C0 C1 00 3D 4C CC CD
- 0x43 = STABILIZE opcode
- 0xC0 = First register
- 0xC1 = Second register
- 0x00 = Mode (full stabilization)
- 0x3D4CCCCD = Extra damping (0.05)

## Compressed Quantum State Format

### State Representation (16 bytes per qubit)
Spatial complex (8 bytes):
- Real: 4 bytes IEEE 754 float
- Imag: 4 bytes IEEE 754 float

Temporal complex (8 bytes):
- Real: 4 bytes IEEE 754 float
- Imag: 4 bytes IEEE 754 float

### Bell State Values
After execution, the states are:
- Qubit 0: spatial=(0.7071+0.7071i), temporal=(0+0i)
- Qubit 1: spatial=(0.7071+0.7071i), temporal=(0+0i)

This represents |Φ+⟩ = (|00⟩ + |11⟩)/√2

## Entanglement Matrix Format

### Bitmap Structure
- Each bit represents an entanglement link
- Bit position = reg1 * 256 + reg2
- Symmetric matrix (if bit[i,j] set, then bit[j,i] set)

For Bell pair:
- Bit 1 set (r0 entangled with r1)
- Bit 256 set (r1 entangled with r0)
- Encoded as 0x00000003 in little-endian

## Execution on Classical Hardware

When this QBIN file is loaded:

1. **Parse Header**: Verify magic number, read offsets
2. **Load Instructions**: Read from instruction section
3. **Execute**:
   ```
   r0 = ComplexNumber(1.0, 0.0)  // |0⟩
   r1 = ComplexNumber(1.0, 0.0)  // |0⟩
   
   r0 = hadamard_stable(r0)      // (|0⟩+|1⟩)/√2
   [r0,r1] = cnot_stable(r0,r1)   // Entangle
   [r0,r1] = stabilize(r0,r1)     // Ensure convergence
   ```
4. **Store Results**: Write final states to data section
5. **Update Entanglement**: Mark r0-r1 as entangled

## Why This Works on Classical CPUs

The key insight: Quantum operations are just complex number arithmetic with stability constraints!

- HADAMARD = multiply by (1+i)/√2 with damping
- CNOT = conditional complex operation with correlation
- Measurement = probabilistic projection with soft collapse

No quantum hardware needed - just clever math!